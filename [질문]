1. 수정, 삭제 API의 request를 어떤 방식으로 사용하셨나요? (param, query, body)
requestbody를 이용해 가져왔다.

2. 어떤 상황에 어떤 방식의 request를 써야하나요?
게시물 등록은 post를 사용하고 게시물전체 조회와 게시물 조회는 get을 사용하였다. 그리고 수정은 put, 삭제는 delete 사용하였다.

3. RESTful한 API를 설계했나요? 어떤 부분이 그런가요? 어떤 부분이 그렇지 않나요?
서비스부분과 컨트롤러 부분의 활용을 더 디테일하게 나누고 설계해야 할것 같다.

4. 적절한 관심사 분리를 적용하였나요? (Controller, Repository, Service)
컨트롤러와 레포지토리, 서비스를 각각 기능에 맞게 구현하였으나 서비스 파트의 기능에서 풀지 못한 것을 컨트롤러에서 해결하였다.

5.작성한 코드에서 빈(Bean)을 모두 찾아보세요!
파일을 실행할수 있는 어플리케이션 파일에@SpringBootApplication 어노테이션이 사용되어 내부적으로@ComponentScan을 사용하는데 이는 @ComponentScan이 붙어있는 모든 하위패키지를 훑어보며 @Component를 찾아 빈으로 등록해준다. 
하위 패키지에는 컨트롤러에 @RestController를 사용하여 내부적으로 @Component를 사용하였고, 이에 따라 빈으로 등록된다.

6. API 명세서 작성 가이드라인을 검색하여 직접 작성한 명세서와 비교해보세요!
